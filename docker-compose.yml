version: '3.8'
services:
  web1:
    build: ./src
    volumes:
      - ./src:/src
    environment:
      SERVER_ID: SERVER-1
      REDIS_HOST: redis
      REDIS_PORT: 6379
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: admin
      DB_PASSWORD: 1234
      DB_NAME: smiles_db

  web2:
    build: ./src
    volumes:
      - ./src:/src
    environment:
      SERVER_ID: SERVER-2
      REDIS_HOST: redis
      REDIS_PORT: 6379
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: admin
      DB_PASSWORD: 1234
      DB_NAME: smiles_db

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx:/etc/nginx/conf.d
    depends_on:
      - web1
      - web2

  postgres:
    image: postgres:latest
    container_name: postgres_smiles_db
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: 1234
      POSTGRES_DB: smiles_db
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_DB_AIRFLOW: airflow
      POSTGRES_USER_AIRFLOW: airflow
      POSTGRES_PASSWORD_AIRFLOW: airflow
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data/pgdata
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 256M
    command: >
      postgres -c max_connections=1000
               -c shared_buffers=256MB
               -c effective_cache_size=768MB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.7
               -c wal_buffers=16MB
               -c default_statistics_target=100
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d smiles_db"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    restart: unless-stopped

  celery_worker:
    build: ./src
    command: celery -A celery_worker worker --loglevel=info
    depends_on:
      - redis
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
    volumes:
      - ./src:/src

  # Airflow Services
  airflow-webserver:
    image: my-airflow-image
    container_name: airflow-webserver
    command: ["webserver"]  # Add command to start the webserver
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://admin:1234@postgres/smiles_db
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://admin:1234@postgres/smiles_db
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
    ports:
      - "8080:8080"
    restart: unless-stopped
    depends_on:
      - postgres
      - redis

  airflow-scheduler:
    image: my-airflow-image
    container_name: airflow-scheduler
    command: ["scheduler"]  # Add command to start the scheduler
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://admin:1234@postgres/smiles_db
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://admin:1234@postgres/smiles_db
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - airflow-webserver

  airflow-init:
    image: my-airflow-image
    container_name: airflow-init
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://admin:1234@postgres/smiles_db
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://admin:1234@postgres/smiles_db
    command: >
      bash -c "
        airflow db upgrade &&
        if ! airflow users list | grep -q admin; then
          airflow users create --username admin --password admin --firstname Admin --lastname Admin --role Admin --email admin@example.com
        fi
      "
    depends_on:
      - postgres



volumes:
  pgdata:
    driver: local
